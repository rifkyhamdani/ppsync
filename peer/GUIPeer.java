package peer;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author rifky
 */
public class GUIPeer extends javax.swing.JFrame {

    public static GUIPeer linkToGUILogin;
    public static ClientPeer linkToClient;
    public static String username;
    public static String password;
    public static String ipserver;
    public static int portnum;
    public static String path;
    public static String pathRepo;
    public static int portServerPeer;
    public static byte[] RC4KeyByte;
    public static boolean login;
    public static boolean pause;

    /**
     * Creates new form Peer
     */
    public GUIPeer() {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception e) {
        }
        initComponents();
        this.setTitle("PSync");
        usernameTextBox.setText("psync");
        passwordTextBox.setText("psync");
        repositoryTextBox.setText("/Users/rifky/Documents/Repo/dir");
        portServerPeerTextBox.setText("10000");
        trackerTextBox.setText("127.0.0.1");
        portTrackerTextBox.setText("6789");
        login = false;
        linkToGUILogin = this;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Title = new javax.swing.JLabel();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        repositoryLabel = new javax.swing.JLabel();
        repositoryTextBox = new javax.swing.JTextField();
        usernameTextBox = new javax.swing.JTextField();
        browseDirButton = new javax.swing.JButton();
        syncButton = new javax.swing.JButton();
        passwordTextBox = new javax.swing.JPasswordField();
        portServerPeerTextBox = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        portTrackerTextBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        trackerTextBox = new javax.swing.JTextField();
        pauseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Title.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        Title.setText("P-SYNC");

        usernameLabel.setText("Username");

        passwordLabel.setText("Password");

        repositoryLabel.setText("Repository");

        usernameTextBox.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                usernameTextBoxInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        usernameTextBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usernameTextBoxKeyReleased(evt);
            }
        });

        browseDirButton.setText("Browse");
        browseDirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseDirButtonActionPerformed(evt);
            }
        });

        syncButton.setText("Sync");
        syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Port");

        jLabel2.setText("Port");

        jLabel3.setText("Tracker");

        pauseButton.setText("Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(Title)
                    .add(layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(passwordLabel)
                            .add(usernameLabel)
                            .add(jLabel1)
                            .add(repositoryLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(portServerPeerTextBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                            .add(passwordTextBox)
                            .add(usernameTextBox)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, browseDirButton)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, repositoryTextBox))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel2)
                                    .add(jLabel3))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(trackerTextBox)
                                    .add(portTrackerTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 234, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createSequentialGroup()
                                .add(pauseButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 86, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(syncButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 88, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(Title)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(usernameLabel)
                            .add(usernameTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(passwordLabel)
                            .add(passwordTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(12, 12, 12)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(portServerPeerTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1)))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(40, 40, 40)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                    .add(jLabel2)
                                    .add(portTrackerTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                                .add(trackerTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jLabel3)))
                        .add(3, 3, 3)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(syncButton)
                            .add(pauseButton))))
                .add(12, 12, 12)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(repositoryTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(repositoryLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(browseDirButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * select directory for repository with JFileChooser
     *
     * @param evt
     */
    private void browseDirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseDirButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser(".");
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            repositoryTextBox.setText(fileChooser.getSelectedFile() + "/");
        }
    }//GEN-LAST:event_browseDirButtonActionPerformed
    
    private void syncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncButtonActionPerformed
        if (!login) { /* not login yet */
            syncButton.setText("Logout");
            username = usernameTextBox.getText();
            password = new String(passwordTextBox.getPassword());
            path = repositoryTextBox.getText();
            pathRepo = path;
            portServerPeer = Integer.valueOf(portServerPeerTextBox.getText());
            ipserver = trackerTextBox.getText();
            portnum = Integer.valueOf(portTrackerTextBox.getText());

            try {
                linkToClient = new ClientPeer(ipserver, portnum, path, username, password);
                System.out.println("LogIn Success...");
                linkToClient.start();
                //this.setVisible(false);
                syncButton.setText("Logout");
                
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        ServerSocket serverSocket = null;
                        try {
                            serverSocket = new ServerSocket(portServerPeer);
                        } catch (IOException ex) {
                            Logger.getLogger(GUIPeer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        while (true) {
                            Socket sockets = null;
                            try {
                                sockets = serverSocket.accept();
                            } catch (IOException ex) {
                                Logger.getLogger(GUIPeer.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            try {
                                new ServerPeer(sockets).start();
                            } catch (Exception ex) {
                                Logger.getLogger(GUIPeer.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }).start();
//                ServerSocket serverSocket = new ServerSocket(portServerPeer);
//                while (true) {
//                    Socket sockets = serverSocket.accept();
//                    new ServerPeer(sockets).start();
//                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error:" + ex.getMessage());
                ex.printStackTrace();
            }
        } else {
            login = false;
            syncButton.setText("Sync");
        }
    }//GEN-LAST:event_syncButtonActionPerformed

    private void usernameTextBoxInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_usernameTextBoxInputMethodTextChanged
        String _username = usernameTextBox.getText();
    }//GEN-LAST:event_usernameTextBoxInputMethodTextChanged

    private void usernameTextBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameTextBoxKeyReleased
        String _username = usernameTextBox.getText();
    }//GEN-LAST:event_usernameTextBoxKeyReleased

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        if (pause) {
            pause = false;
            pauseButton.setText("Pause");
        } else {
            pause = true;
            pauseButton.setText("Play");
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    public void changeLogoutToSync() {
        syncButton.setText("Sync");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIPeer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIPeer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIPeer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIPeer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                GUIPeer dialog = new GUIPeer();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        try {
                        } catch (Exception ex) {
                            Logger.getLogger(GUIPeer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Title;
    private javax.swing.JButton browseDirButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JPasswordField passwordTextBox;
    private javax.swing.JButton pauseButton;
    private javax.swing.JTextField portServerPeerTextBox;
    private javax.swing.JTextField portTrackerTextBox;
    private javax.swing.JLabel repositoryLabel;
    private javax.swing.JTextField repositoryTextBox;
    private javax.swing.JButton syncButton;
    private javax.swing.JTextField trackerTextBox;
    private javax.swing.JLabel usernameLabel;
    private javax.swing.JTextField usernameTextBox;
    // End of variables declaration//GEN-END:variables
}
